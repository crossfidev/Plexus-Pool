From 88e9cd2085011d821995123dfa420a48da37d0b4 Mon Sep 17 00:00:00 2001
From: GitLabRoman <gitlabroman@yandex.ru>
Date: Mon, 3 Aug 2020 17:03:59 +0700
Subject: [PATCH] Revert variables name

---
 .../tezos-init-sandboxed-client-d007.sh       | 12 ++++-----
 src/proto_alpha/lib_client/mockup.ml          | 26 +++++++++----------
 .../lib_parameters/default_parameters.ml      |  8 +++---
 .../lib_protocol/bootstrap_storage.ml         |  4 +--
 .../lib_protocol/contract_storage.ml          |  4 +--
 .../lib_protocol/parameters_repr.ml           | 18 ++++++-------
 .../lib_protocol/parameters_repr.mli          |  2 +-
 7 files changed, 37 insertions(+), 37 deletions(-)

diff --git a/src/bin_client/tezos-init-sandboxed-client-d007.sh b/src/bin_client/tezos-init-sandboxed-client-d007.sh
index 587bd088d..68b58bb0a 100755
--- a/src/bin_client/tezos-init-sandboxed-client-d007.sh
+++ b/src/bin_client/tezos-init-sandboxed-client-d007.sh
@@ -101,11 +101,11 @@ add_sandboxed_bootstrap_identities() {
     ${client} import secret key activator ${ACTIVATOR_SECRET}
 }
 
-activate_007_Ps2i822q() {
+activate_007_PsEp9hue() {
 
     ${client} \
         -block genesis \
-        activate protocol Ps2i822qmKkoZw8q4pKrx1U1NcM9mmwjVU1YNhVA14T9wwzJjG4 \
+        activate protocol PsEp9hue9hEMGD8kMdrzFw8suHv9cqTTFoRETH2byFJV1f4jR55 \
         with fitness 1 \
         and key activator \
         and parameters "${parameters_file}" \
@@ -128,7 +128,7 @@ main () {
         local_signer="${local_signer:-$bin_dir/../../_build/default/src/bin_signer/main_signer.exe}"
         local_compiler="${local_compiler:-$bin_dir/../../_build/default/src/lib_protocol_compiler/main_native.exe}"
 
-        parameters_file="$bin_dir/../proto_007_Ps2i822q/parameters/sandbox-parameters.json"
+        parameters_file="$bin_dir/../proto_007_PsEp9hue/parameters/sandbox-parameters.json"
 
     else
         # we assume a clean install with tezos-(admin-)client in the path
@@ -193,8 +193,8 @@ main () {
     cat <<EOF
 if type tezos-client-reset >/dev/null 2>&1 ; then tezos-client-reset; fi ;
 PATH="$client_dir/bin:\$PATH" ; export PATH ;
-alias tezos-activate-007-Ps2i822q="$client  -block genesis activate protocol Ps2i822qmKkoZw8q4pKrx1U1NcM9mmwjVU1YNhVA14T9wwzJjG4 with fitness 1 and key activator and parameters $parameters_file --timestamp $(TZ='AAA+1' date +%FT%TZ)" ;
-alias tezos-client-reset="rm -rf \"$client_dir\"; unalias tezos-activate-007-Ps2i822q tezos-client-reset" ;
+alias tezos-activate-007-PsEp9hue="$client  -block genesis activate protocol PsEp9hue9hEMGD8kMdrzFw8suHv9cqTTFoRETH2byFJV1f4jR55 with fitness 1 and key activator and parameters $parameters_file --timestamp $(TZ='AAA+1' date +%FT%TZ)" ;
+alias tezos-client-reset="rm -rf \"$client_dir\"; unalias tezos-activate-007-PsEp9hue tezos-client-reset" ;
 alias tezos-autocomplete="if [ \$ZSH_NAME ] ; then autoload bashcompinit ; bashcompinit ; fi ; source \"$bin_dir/bash-completion.sh\"" ;
 trap tezos-client-reset EXIT ;
 
@@ -213,7 +213,7 @@ command, is "ProtoGenesisGenesisGenesisGenesisGenesisGenesk612im", you
 may have to activate in your "sandboxed network" the same economic
 protocol as used by the alphanet by running:
 
-  tezos-activate-007-Ps2i822q
+  tezos-activate-007-PsEp9hue
 
 Warning: all the client data will be removed when you close this shell
 or if you run this command a second time.
diff --git a/src/proto_alpha/lib_client/mockup.ml b/src/proto_alpha/lib_client/mockup.ml
index af1f495fb..56d088473 100644
--- a/src/proto_alpha/lib_client/mockup.ml
+++ b/src/proto_alpha/lib_client/mockup.ml
@@ -46,7 +46,7 @@ type parsed_account_repr = {
   name : string;
   sk_uri : Client_keys.sk_uri;
   amount : Protocol.Tez_repr.t;
-  amount_mine : Protocol.Mine_repr.t;
+  mine_amount : Protocol.Mine_repr.t;
 }
 
 let parsed_account_repr_pp ppf account =
@@ -67,15 +67,15 @@ let bootstrap_account_encoding :
   let open Data_encoding in
   let open Protocol.Parameters_repr in
   conv
-    (fun {public_key_hash; public_key; amount; amount_mine} ->
-      (public_key_hash, public_key, amount, amount_mine))
-    (fun (public_key_hash, public_key, amount, amount_mine) ->
-      {public_key_hash; public_key; amount; amount_mine})
+    (fun {public_key_hash; public_key; amount; mine_amount} ->
+      (public_key_hash, public_key, amount, mine_amount))
+    (fun (public_key_hash, public_key, amount, mine_amount) ->
+      {public_key_hash; public_key; amount; mine_amount})
     (obj4
        (req "public_key_hash" Signature.Public_key_hash.encoding)
        (opt "public_key" Signature.Public_key.encoding)
        (req "amount" Protocol.Tez_repr.encoding)
-       (req "amount_mine" Protocol.Mine_repr.encoding))
+       (req "mine_amount" Protocol.Mine_repr.encoding))
 
 let bootstrap_contract_encoding :
     Protocol.Parameters_repr.bootstrap_contract Data_encoding.t =
@@ -170,18 +170,18 @@ let bootstrap_account_to_parsed_account_repr cctxt
     (bootstrap_account : Protocol.Parameters_repr.bootstrap_account) =
   Client_keys.get_key cctxt bootstrap_account.public_key_hash
   >>=? fun (name, _, sk_uri) ->
-  return {name; sk_uri; amount = bootstrap_account.amount; amount_mine = bootstrap_account.amount_mine}
+  return {name; sk_uri; amount = bootstrap_account.amount; mine_amount = bootstrap_account.mine_amount}
 
 let parsed_account_repr_encoding =
   let open Data_encoding in
   conv
-    (fun p -> (p.name, p.sk_uri, p.amount, p.amount_mine))
-    (fun (name, sk_uri, amount, amount_mine) -> {name; sk_uri; amount; amount_mine})
+    (fun p -> (p.name, p.sk_uri, p.amount, p.mine_amount))
+    (fun (name, sk_uri, amount, mine_amount) -> {name; sk_uri; amount; mine_amount})
     (obj4
        (req "name" string)
        (req "sk_uri" Client_keys.Secret_key.encoding)
        (req "amount" Protocol.Tez_repr.encoding)
-       (req "amount_mine" Protocol.Mine_repr.encoding))
+       (req "mine_amount" Protocol.Mine_repr.encoding))
 
 let mockup_default_bootstrap_accounts
     (cctxt : Tezos_client_base.Client_context.full) : string tzresult Lwt.t =
@@ -213,9 +213,9 @@ let mockup_default_bootstrap_accounts
               | None ->
                   (* we're reading the wallet, it's content MUST be valid *)
                   assert false
-              | Some amount_mine ->
+              | Some mine_amount ->
                   parsed_account_reprs :=
-                    {name; sk_uri; amount = Protocol.Tez_repr.zero; amount_mine} :: !parsed_account_reprs ;
+                    {name; sk_uri; amount = Protocol.Tez_repr.zero; mine_amount} :: !parsed_account_reprs ;
                   Lwt.return_unit )
           | Error err ->
               errors := err :: !errors ;
@@ -300,7 +300,7 @@ let to_bootstrap_account repr =
   let public_key_hash = Signature.Public_key.hash public_key in
   return
     Protocol.Parameters_repr.
-      {public_key_hash; public_key = Some public_key; amount = repr.amount; amount_mine = repr.amount_mine}
+      {public_key_hash; public_key = Some public_key; amount = repr.amount; mine_amount = repr.mine_amount}
 
 (* ------------------------------------------------------------------------- *)
 (* Blocks *)
diff --git a/src/proto_alpha/lib_parameters/default_parameters.ml b/src/proto_alpha/lib_parameters/default_parameters.ml
index 09bd9accf..fa7d1cb1e 100644
--- a/src/proto_alpha/lib_parameters/default_parameters.ml
+++ b/src/proto_alpha/lib_parameters/default_parameters.ml
@@ -96,7 +96,7 @@ let bootstrap_accounts_strings =
     "edpkuFrRoDSEbJYgxRtLx2ps82UdaYc1WwfS9sE11yhauZt5DgCHbU";
     "edpkv8EUUH68jmo3f7Um5PezmfGrRF24gnfLpH3sVNwJnV5bVCxL2n" ]
 
-let bootstrap_mine_balance = Mine_repr.of_mutez_exn 4_000_000_000_000L
+let mine_bootstrap_balance = Mine_repr.of_mutez_exn 4_000_000_000_000L
 let bootstrap_balance = Tez_repr.of_mutez_exn 1_000_000_000_000L
 
 let bootstrap_accounts =
@@ -109,7 +109,7 @@ let bootstrap_accounts =
           public_key_hash;
           public_key = Some public_key;
           amount = bootstrap_balance;
-          amount_mine = bootstrap_mine_balance;
+          mine_amount = mine_bootstrap_balance;
         })
     bootstrap_accounts_strings
 
@@ -140,8 +140,8 @@ let commitments =
         (Data_encoding.list Commitment_repr.encoding)
         json
 
-let make_bootstrap_account (pkh, pk, amount, amount_mine) =
-  Parameters_repr.{public_key_hash = pkh; public_key = Some pk; amount; amount_mine}
+let make_bootstrap_account (pkh, pk, amount, mine_amount) =
+  Parameters_repr.{public_key_hash = pkh; public_key = Some pk; amount; mine_amount}
 
 let parameters_of_constants ?(bootstrap_accounts = bootstrap_accounts)
     ?(bootstrap_contracts = []) ?(with_commitments = false) constants =
diff --git a/src/proto_alpha/lib_protocol/bootstrap_storage.ml b/src/proto_alpha/lib_protocol/bootstrap_storage.ml
index 2e663f201..84feda3ce 100644
--- a/src/proto_alpha/lib_protocol/bootstrap_storage.ml
+++ b/src/proto_alpha/lib_protocol/bootstrap_storage.ml
@@ -26,10 +26,10 @@
 open Misc
 
 let init_account ctxt
-    ({public_key_hash; public_key; amount; amount_mine} : Parameters_repr.bootstrap_account)
+    ({public_key_hash; public_key; amount; mine_amount} : Parameters_repr.bootstrap_account)
     =
   let contract = Contract_repr.implicit_contract public_key_hash in
-  Contract_storage.credit ctxt contract amount amount_mine
+  Contract_storage.credit ctxt contract amount mine_amount
   >>=? fun ctxt ->
   match public_key with
   | Some public_key ->
diff --git a/src/proto_alpha/lib_protocol/contract_storage.ml b/src/proto_alpha/lib_protocol/contract_storage.ml
index fac1b3a72..8629ff6ff 100644
--- a/src/proto_alpha/lib_protocol/contract_storage.ml
+++ b/src/proto_alpha/lib_protocol/contract_storage.ml
@@ -724,7 +724,7 @@ let spend c contract amount =
                 (* Delete empty implicit contract *)
                 delete c contract ) )
 
-let credit c contract amount amount_mine  =
+let credit c contract amount mine_amount  =
   ( if Tez_repr.(amount <> Tez_repr.zero) then return c
   else
     Storage.Contract.Code.mem c contract
@@ -739,7 +739,7 @@ let credit c contract amount amount_mine  =
     | None ->
         fail (Non_existing_contract contract)
     | Some manager ->
-        create_implicit c manager ~balance:amount ~mine_balance:amount_mine )
+        create_implicit c manager ~balance:amount ~mine_balance:mine_amount )
   | Some balance ->
       Lwt.return Tez_repr.(amount +? balance)
       >>=? fun balance ->
diff --git a/src/proto_alpha/lib_protocol/parameters_repr.ml b/src/proto_alpha/lib_protocol/parameters_repr.ml
index 291a76852..84f46205c 100644
--- a/src/proto_alpha/lib_protocol/parameters_repr.ml
+++ b/src/proto_alpha/lib_protocol/parameters_repr.ml
@@ -27,7 +27,7 @@ type bootstrap_account = {
   public_key_hash : Signature.Public_key_hash.t;
   public_key : Signature.Public_key.t option;
   amount : Tez_repr.t;
-  amount_mine : Mine_repr.t;
+  mine_amount : Mine_repr.t;
 }
 
 type bootstrap_contract = {
@@ -53,32 +53,32 @@ let bootstrap_account_encoding =
         ~title:"Public_key_known"
         (tup3 Signature.Public_key.encoding Tez_repr.encoding Mine_repr.encoding)
         (function
-          | {public_key_hash; public_key = Some public_key; amount; amount_mine} ->
+          | {public_key_hash; public_key = Some public_key; amount; mine_amount} ->
               assert (
                 Signature.Public_key_hash.equal
                   (Signature.Public_key.hash public_key)
                   public_key_hash ) ;
-              Some (public_key, amount, amount_mine)
+              Some (public_key, amount, mine_amount)
           | {public_key = None} ->
               None)
-        (fun (public_key, amount, amount_mine) ->
+        (fun (public_key, amount, mine_amount) ->
           {
             public_key = Some public_key;
             public_key_hash = Signature.Public_key.hash public_key;
             amount;
-            amount_mine;
+            mine_amount;
           });
       case
         (Tag 1)
         ~title:"Public_key_unknown"
         (tup3 Signature.Public_key_hash.encoding Tez_repr.encoding Mine_repr.encoding)
         (function
-          | {public_key_hash; public_key = None; amount; amount_mine} ->
-              Some (public_key_hash, amount, amount_mine)
+          | {public_key_hash; public_key = None; amount; mine_amount} ->
+              Some (public_key_hash, amount, mine_amount)
           | {public_key = Some _} ->
               None)
-        (fun (public_key_hash, amount, amount_mine) ->
-          {public_key = None; public_key_hash; amount; amount_mine}) ]
+        (fun (public_key_hash, amount, mine_amount) ->
+          {public_key = None; public_key_hash; amount; mine_amount}) ]
 
 let bootstrap_contract_encoding =
   let open Data_encoding in
diff --git a/src/proto_alpha/lib_protocol/parameters_repr.mli b/src/proto_alpha/lib_protocol/parameters_repr.mli
index 7e1065d69..8b7df99c5 100644
--- a/src/proto_alpha/lib_protocol/parameters_repr.mli
+++ b/src/proto_alpha/lib_protocol/parameters_repr.mli
@@ -27,7 +27,7 @@ type bootstrap_account = {
   public_key_hash : Signature.Public_key_hash.t;
   public_key : Signature.Public_key.t option;
   amount : Tez_repr.t;
-  amount_mine : Mine_repr.t;
+  mine_amount : Mine_repr.t;
 }
 
 type bootstrap_contract = {
-- 
2.26.2
