From a212fc7a30c775ad7b3c8c52d856532a10248b47 Mon Sep 17 00:00:00 2001
From: GitLabRoman <gitlabroman@yandex.ru>
Date: Mon, 3 Aug 2020 12:23:32 +0700
Subject: [PATCH] Add Mine coin

---
 .../lib_client/client_proto_context.ml        |  3 ++
 .../lib_client/client_proto_context.mli       |  7 ++++
 src/proto_alpha/lib_client/mockup.ml          | 41 ++++++++++---------
 .../client_proto_context_commands.ml          | 16 +++++++-
 src/proto_alpha/lib_protocol/alpha_context.ml |  1 +
 .../lib_protocol/alpha_context.mli            | 32 +++++++++++++++
 .../lib_protocol/contract_services.ml         | 10 +++++
 .../lib_protocol/contract_services.mli        |  3 ++
 src/proto_alpha/lib_protocol/init_storage.ml  |  3 ++
 .../lib_protocol/parameters_repr.ml           | 19 +++++----
 .../lib_protocol/parameters_repr.mli          |  1 +
 11 files changed, 106 insertions(+), 30 deletions(-)

diff --git a/src/proto_alpha/lib_client/client_proto_context.ml b/src/proto_alpha/lib_client/client_proto_context.ml
index bf469e1eb..2a8bc507d 100644
--- a/src/proto_alpha/lib_client/client_proto_context.ml
+++ b/src/proto_alpha/lib_client/client_proto_context.ml
@@ -33,6 +33,9 @@ open Client_keys
 let get_balance (rpc : #rpc_context) ~chain ~block contract =
   Alpha_services.Contract.balance rpc (chain, block) contract
 
+let get_mine_balance (rpc : #rpc_context) ~chain ~block contract =
+  Alpha_services.Contract.mine_balance rpc (chain, block) contract
+
 let get_storage (rpc : #rpc_context) ~chain ~block contract =
   Alpha_services.Contract.storage_opt rpc (chain, block) contract
 
diff --git a/src/proto_alpha/lib_client/client_proto_context.mli b/src/proto_alpha/lib_client/client_proto_context.mli
index 22fa21272..b495d2c36 100644
--- a/src/proto_alpha/lib_client/client_proto_context.mli
+++ b/src/proto_alpha/lib_client/client_proto_context.mli
@@ -69,6 +69,13 @@ val get_balance :
   Contract.t ->
   Tez.t tzresult Lwt.t
 
+val get_mine_balance :
+  #Protocol_client_context.rpc_context ->
+  chain:Shell_services.chain ->
+  block:Shell_services.block ->
+  Contract.t ->
+  Mine.t tzresult Lwt.t
+
 val set_delegate :
   #Protocol_client_context.full ->
   chain:Shell_services.chain ->
diff --git a/src/proto_alpha/lib_client/mockup.ml b/src/proto_alpha/lib_client/mockup.ml
index b00de7f85..af1f495fb 100644
--- a/src/proto_alpha/lib_client/mockup.ml
+++ b/src/proto_alpha/lib_client/mockup.ml
@@ -46,6 +46,7 @@ type parsed_account_repr = {
   name : string;
   sk_uri : Client_keys.sk_uri;
   amount : Protocol.Tez_repr.t;
+  amount_mine : Protocol.Mine_repr.t;
 }
 
 let parsed_account_repr_pp ppf account =
@@ -66,14 +67,15 @@ let bootstrap_account_encoding :
   let open Data_encoding in
   let open Protocol.Parameters_repr in
   conv
-    (fun {public_key_hash; public_key; amount} ->
-      (public_key_hash, public_key, amount))
-    (fun (public_key_hash, public_key, amount) ->
-      {public_key_hash; public_key; amount})
-    (obj3
+    (fun {public_key_hash; public_key; amount; amount_mine} ->
+      (public_key_hash, public_key, amount, amount_mine))
+    (fun (public_key_hash, public_key, amount, amount_mine) ->
+      {public_key_hash; public_key; amount; amount_mine})
+    (obj4
        (req "public_key_hash" Signature.Public_key_hash.encoding)
        (opt "public_key" Signature.Public_key.encoding)
-       (req "amount" Protocol.Tez_repr.encoding))
+       (req "amount" Protocol.Tez_repr.encoding)
+       (req "amount_mine" Protocol.Mine_repr.encoding))
 
 let bootstrap_contract_encoding :
     Protocol.Parameters_repr.bootstrap_contract Data_encoding.t =
@@ -168,17 +170,18 @@ let bootstrap_account_to_parsed_account_repr cctxt
     (bootstrap_account : Protocol.Parameters_repr.bootstrap_account) =
   Client_keys.get_key cctxt bootstrap_account.public_key_hash
   >>=? fun (name, _, sk_uri) ->
-  return {name; sk_uri; amount = bootstrap_account.amount}
+  return {name; sk_uri; amount = bootstrap_account.amount; amount_mine = bootstrap_account.amount_mine}
 
 let parsed_account_repr_encoding =
   let open Data_encoding in
   conv
-    (fun p -> (p.name, p.sk_uri, p.amount))
-    (fun (name, sk_uri, amount) -> {name; sk_uri; amount})
-    (obj3
+    (fun p -> (p.name, p.sk_uri, p.amount, p.amount_mine))
+    (fun (name, sk_uri, amount, amount_mine) -> {name; sk_uri; amount; amount_mine})
+    (obj4
        (req "name" string)
        (req "sk_uri" Client_keys.Secret_key.encoding)
-       (req "amount" Protocol.Tez_repr.encoding))
+       (req "amount" Protocol.Tez_repr.encoding)
+       (req "amount_mine" Protocol.Mine_repr.encoding))
 
 let mockup_default_bootstrap_accounts
     (cctxt : Tezos_client_base.Client_context.full) : string tzresult Lwt.t =
@@ -194,7 +197,7 @@ let mockup_default_bootstrap_accounts
           let contract =
             Protocol.Alpha_context.Contract.implicit_contract pkh
           in
-          Client_proto_context.get_balance
+          Client_proto_context.get_mine_balance
             rpc_context
             ~chain:cctxt#chain
             ~block:cctxt#block
@@ -202,17 +205,17 @@ let mockup_default_bootstrap_accounts
           >>= fun tz_balance ->
           match tz_balance with
           | Ok balance -> (
-              let tez_repr =
-                Protocol.Tez_repr.of_mutez
-                @@ Protocol.Alpha_context.Tez.to_mutez balance
+              let mine_repr =
+                Protocol.Mine_repr.of_mutez
+                @@ Protocol.Alpha_context.Mine.to_mutez balance
               in
-              match tez_repr with
+              match mine_repr with
               | None ->
                   (* we're reading the wallet, it's content MUST be valid *)
                   assert false
-              | Some amount ->
+              | Some amount_mine ->
                   parsed_account_reprs :=
-                    {name; sk_uri; amount} :: !parsed_account_reprs ;
+                    {name; sk_uri; amount = Protocol.Tez_repr.zero; amount_mine} :: !parsed_account_reprs ;
                   Lwt.return_unit )
           | Error err ->
               errors := err :: !errors ;
@@ -297,7 +300,7 @@ let to_bootstrap_account repr =
   let public_key_hash = Signature.Public_key.hash public_key in
   return
     Protocol.Parameters_repr.
-      {public_key_hash; public_key = Some public_key; amount = repr.amount}
+      {public_key_hash; public_key = Some public_key; amount = repr.amount; amount_mine = repr.amount_mine}
 
 (* ------------------------------------------------------------------------- *)
 (* Blocks *)
diff --git a/src/proto_alpha/lib_client_commands/client_proto_context_commands.ml b/src/proto_alpha/lib_client_commands/client_proto_context_commands.ml
index a061edb46..2a53673a9 100644
--- a/src/proto_alpha/lib_client_commands/client_proto_context_commands.ml
+++ b/src/proto_alpha/lib_client_commands/client_proto_context_commands.ml
@@ -222,9 +222,9 @@ let commands version () =
         >>= fun () -> return_unit);
     command
       ~group
-      ~desc:"Get the balance of a contract."
+      ~desc:"Get the mine_balance of a contract."
       no_options
-      ( prefixes ["get"; "balance"; "for"]
+      ( prefixes ["get"; "mine_balance"; "for"]
       @@ ContractAlias.destination_param ~name:"src" ~desc:"source contract"
       @@ stop )
       (fun () (_, contract) (cctxt : Protocol_client_context.full) ->
@@ -232,6 +232,18 @@ let commands version () =
         >>=? fun amount ->
         cctxt#answer "%a %s" Tez.pp amount Client_proto_args.tez_sym
         >>= fun () -> return_unit);
+    command
+      ~group
+      ~desc:"Get the balance of a contract."
+      no_options
+      ( prefixes ["get"; "balance"; "for"]
+      @@ ContractAlias.destination_param ~name:"src" ~desc:"source contract"
+      @@ stop )
+      (fun () (_, contract) (cctxt : Protocol_client_context.full) ->
+        get_mine_balance cctxt ~chain:cctxt#chain ~block:cctxt#block contract
+        >>=? fun amount ->
+        cctxt#answer "%a %s" Mine.pp amount Client_proto_args.tez_sym
+        >>= fun () -> return_unit);
     command
       ~group
       ~desc:"Get the storage of a contract."
diff --git a/src/proto_alpha/lib_protocol/alpha_context.ml b/src/proto_alpha/lib_protocol/alpha_context.ml
index 5eaf19850..03fce591d 100644
--- a/src/proto_alpha/lib_protocol/alpha_context.ml
+++ b/src/proto_alpha/lib_protocol/alpha_context.ml
@@ -38,6 +38,7 @@ module type BASIC_DATA = sig
 end
 
 module Tez = Tez_repr
+module Mine = Mine_repr
 module Period = Period_repr
 
 module Timestamp = struct
diff --git a/src/proto_alpha/lib_protocol/alpha_context.mli b/src/proto_alpha/lib_protocol/alpha_context.mli
index f7f4fe907..67852991b 100644
--- a/src/proto_alpha/lib_protocol/alpha_context.mli
+++ b/src/proto_alpha/lib_protocol/alpha_context.mli
@@ -75,6 +75,38 @@ module Tez : sig
   val to_mutez : tez -> int64
 end
 
+module Mine : sig
+  include BASIC_DATA
+
+  type mine = t
+
+  val zero : mine
+
+  val one_mutez : mine
+
+  val one_cent : mine
+
+  val fifty_cents : mine
+
+  val one : mine
+
+  val ( -? ) : mine -> mine -> mine tzresult
+
+  val ( +? ) : mine -> mine -> mine tzresult
+
+  val ( *? ) : mine -> int64 -> mine tzresult
+
+  val ( /? ) : mine -> int64 -> mine tzresult
+
+  val of_string : string -> mine option
+
+  val to_string : mine -> string
+
+  val of_mutez : int64 -> mine option
+
+  val to_mutez : mine -> int64
+end
+
 module Period : sig
   include BASIC_DATA
 
diff --git a/src/proto_alpha/lib_protocol/contract_services.ml b/src/proto_alpha/lib_protocol/contract_services.ml
index b350c9089..1cea32b6f 100644
--- a/src/proto_alpha/lib_protocol/contract_services.ml
+++ b/src/proto_alpha/lib_protocol/contract_services.ml
@@ -63,6 +63,13 @@ module S = struct
       ~output:Tez.encoding
       RPC_path.(custom_root /: Contract.rpc_arg / "balance")
 
+  let mine_balance =
+    RPC_service.get_service
+      ~description:"Access the mine_balance of a contract."
+      ~query:RPC_query.empty
+      ~output:Mine.encoding
+      RPC_path.(custom_root /: Contract.rpc_arg / "mine_balance")
+
   let manager_key =
     RPC_service.get_service
       ~description:"Access the manager of a contract."
@@ -376,6 +383,9 @@ let info ctxt block contract =
 let balance ctxt block contract =
   RPC_context.make_call1 S.balance ctxt block contract () ()
 
+let mine_balance ctxt block contract =
+  RPC_context.make_call1 S.mine_balance ctxt block contract () ()
+
 let manager_key ctxt block mgr =
   RPC_context.make_call1
     S.manager_key
diff --git a/src/proto_alpha/lib_protocol/contract_services.mli b/src/proto_alpha/lib_protocol/contract_services.mli
index 3c3aab0ee..590f9ec26 100644
--- a/src/proto_alpha/lib_protocol/contract_services.mli
+++ b/src/proto_alpha/lib_protocol/contract_services.mli
@@ -42,6 +42,9 @@ val info :
 val balance :
   'a #RPC_context.simple -> 'a -> Contract.t -> Tez.t shell_tzresult Lwt.t
 
+val mine_balance :
+  'a #RPC_context.simple -> 'a -> Contract.t -> Mine.t shell_tzresult Lwt.t
+
 val manager_key :
   'a #RPC_context.simple ->
   'a ->
diff --git a/src/proto_alpha/lib_protocol/init_storage.ml b/src/proto_alpha/lib_protocol/init_storage.ml
index 8518a027f..c4b1784b7 100644
--- a/src/proto_alpha/lib_protocol/init_storage.ml
+++ b/src/proto_alpha/lib_protocol/init_storage.ml
@@ -29,6 +29,7 @@ let prepare_first_block ctxt ~typecheck ~level ~timestamp ~fitness =
   >>=? fun (previous_protocol, ctxt) ->
   match previous_protocol with
   | Genesis param ->
+      Logging.log_notice "\nGenesis STITCHING!\n" ;
       Commitment_storage.init ctxt param.commitments
       >>=? fun ctxt ->
       Roll_storage.init ctxt
@@ -53,8 +54,10 @@ let prepare_first_block ctxt ~typecheck ~level ~timestamp ~fitness =
       >>=? fun ctxt ->
       Vote_storage.freeze_listings ctxt >>=? fun ctxt -> return ctxt
   | Alpha_previous ->
+      Logging.log_notice "\nAlpha_previous STITCHING!\n" ;
       return ctxt
   | Carthage_006 ->
+      Logging.log_notice "\narthage_006 STITCHING!\n" ;
       return ctxt
 
 let prepare ctxt ~level ~predecessor_timestamp ~timestamp ~fitness =
diff --git a/src/proto_alpha/lib_protocol/parameters_repr.ml b/src/proto_alpha/lib_protocol/parameters_repr.ml
index 1247793a5..291a76852 100644
--- a/src/proto_alpha/lib_protocol/parameters_repr.ml
+++ b/src/proto_alpha/lib_protocol/parameters_repr.ml
@@ -27,6 +27,7 @@ type bootstrap_account = {
   public_key_hash : Signature.Public_key_hash.t;
   public_key : Signature.Public_key.t option;
   amount : Tez_repr.t;
+  amount_mine : Mine_repr.t;
 }
 
 type bootstrap_contract = {
@@ -50,17 +51,17 @@ let bootstrap_account_encoding =
     [ case
         (Tag 0)
         ~title:"Public_key_known"
-        (tup2 Signature.Public_key.encoding Tez_repr.encoding)
+        (tup3 Signature.Public_key.encoding Tez_repr.encoding Mine_repr.encoding)
         (function
-          | {public_key_hash; public_key = Some public_key; amount} ->
+          | {public_key_hash; public_key = Some public_key; amount; amount_mine} ->
               assert (
                 Signature.Public_key_hash.equal
                   (Signature.Public_key.hash public_key)
                   public_key_hash ) ;
-              Some (public_key, amount)
+              Some (public_key, amount, amount_mine)
           | {public_key = None} ->
               None)
-        (fun (public_key, amount) ->
+        (fun (public_key, amount, amount_mine) ->
           {
             public_key = Some public_key;
             public_key_hash = Signature.Public_key.hash public_key;
@@ -70,14 +71,14 @@ let bootstrap_account_encoding =
       case
         (Tag 1)
         ~title:"Public_key_unknown"
-        (tup2 Signature.Public_key_hash.encoding Tez_repr.encoding)
+        (tup3 Signature.Public_key_hash.encoding Tez_repr.encoding Mine_repr.encoding)
         (function
-          | {public_key_hash; public_key = None; amount} ->
-              Some (public_key_hash, amount)
+          | {public_key_hash; public_key = None; amount; amount_mine} ->
+              Some (public_key_hash, amount, amount_mine)
           | {public_key = Some _} ->
               None)
-        (fun (public_key_hash, amount) ->
-          {public_key = None; public_key_hash; amount}) ]
+        (fun (public_key_hash, amount, amount_mine) ->
+          {public_key = None; public_key_hash; amount; amount_mine}) ]
 
 let bootstrap_contract_encoding =
   let open Data_encoding in
diff --git a/src/proto_alpha/lib_protocol/parameters_repr.mli b/src/proto_alpha/lib_protocol/parameters_repr.mli
index 6f8436e71..7e1065d69 100644
--- a/src/proto_alpha/lib_protocol/parameters_repr.mli
+++ b/src/proto_alpha/lib_protocol/parameters_repr.mli
@@ -27,6 +27,7 @@ type bootstrap_account = {
   public_key_hash : Signature.Public_key_hash.t;
   public_key : Signature.Public_key.t option;
   amount : Tez_repr.t;
+  amount_mine : Mine_repr.t;
 }
 
 type bootstrap_contract = {
-- 
2.26.2
